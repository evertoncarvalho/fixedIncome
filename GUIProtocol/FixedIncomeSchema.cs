// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FixedIncomeProtocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum IndexerType : sbyte
{
  CDI = 0,
  CDI_PLUS = 1,
  IPCA12 = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum TaxType : sbyte
{
  PRE = 0,
  POST = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum FixedIncomeType : sbyte
{
  LC = 0,
  LCA = 1,
  LCI = 2,
  CDB = 3,
  CRA = 4,
  CRI = 5,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum FixedIncomeMessageType : byte
{
  NONE = 0,
  FixedIncome = 1,
  Indexer = 2,
  RequestFixedIncomes = 3,
  RequestIndexers = 4,
  ResponseFixedIncomes = 5,
  ResponseIndexers = 6,
};

public class FixedIncomeMessageTypeUnion {
  public FixedIncomeMessageType Type { get; set; }
  public object Value { get; set; }

  public FixedIncomeMessageTypeUnion() {
    this.Type = FixedIncomeMessageType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public FixedIncomeProtocol.FixedIncomeT AsFixedIncome() { return this.As<FixedIncomeProtocol.FixedIncomeT>(); }
  public FixedIncomeProtocol.IndexerT AsIndexer() { return this.As<FixedIncomeProtocol.IndexerT>(); }
  public FixedIncomeProtocol.RequestFixedIncomesT AsRequestFixedIncomes() { return this.As<FixedIncomeProtocol.RequestFixedIncomesT>(); }
  public FixedIncomeProtocol.RequestIndexersT AsRequestIndexers() { return this.As<FixedIncomeProtocol.RequestIndexersT>(); }
  public FixedIncomeProtocol.ResponseFixedIncomesT AsResponseFixedIncomes() { return this.As<FixedIncomeProtocol.ResponseFixedIncomesT>(); }
  public FixedIncomeProtocol.ResponseIndexersT AsResponseIndexers() { return this.As<FixedIncomeProtocol.ResponseIndexersT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, FixedIncomeMessageTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case FixedIncomeMessageType.FixedIncome: return FixedIncomeProtocol.FixedIncome.Pack(builder, _o.AsFixedIncome()).Value;
      case FixedIncomeMessageType.Indexer: return FixedIncomeProtocol.Indexer.Pack(builder, _o.AsIndexer()).Value;
      case FixedIncomeMessageType.RequestFixedIncomes: return FixedIncomeProtocol.RequestFixedIncomes.Pack(builder, _o.AsRequestFixedIncomes()).Value;
      case FixedIncomeMessageType.RequestIndexers: return FixedIncomeProtocol.RequestIndexers.Pack(builder, _o.AsRequestIndexers()).Value;
      case FixedIncomeMessageType.ResponseFixedIncomes: return FixedIncomeProtocol.ResponseFixedIncomes.Pack(builder, _o.AsResponseFixedIncomes()).Value;
      case FixedIncomeMessageType.ResponseIndexers: return FixedIncomeProtocol.ResponseIndexers.Pack(builder, _o.AsResponseIndexers()).Value;
    }
  }
}

public class FixedIncomeMessageTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(FixedIncomeMessageTypeUnion) || objectType == typeof(System.Collections.Generic.List<FixedIncomeMessageTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<FixedIncomeMessageTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as FixedIncomeMessageTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, FixedIncomeMessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<FixedIncomeMessageTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as FixedIncomeMessageTypeUnion, serializer);
    }
  }
  public FixedIncomeMessageTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, FixedIncomeMessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case FixedIncomeMessageType.FixedIncome: _o.Value = serializer.Deserialize<FixedIncomeProtocol.FixedIncomeT>(reader); break;
      case FixedIncomeMessageType.Indexer: _o.Value = serializer.Deserialize<FixedIncomeProtocol.IndexerT>(reader); break;
      case FixedIncomeMessageType.RequestFixedIncomes: _o.Value = serializer.Deserialize<FixedIncomeProtocol.RequestFixedIncomesT>(reader); break;
      case FixedIncomeMessageType.RequestIndexers: _o.Value = serializer.Deserialize<FixedIncomeProtocol.RequestIndexersT>(reader); break;
      case FixedIncomeMessageType.ResponseFixedIncomes: _o.Value = serializer.Deserialize<FixedIncomeProtocol.ResponseFixedIncomesT>(reader); break;
      case FixedIncomeMessageType.ResponseIndexers: _o.Value = serializer.Deserialize<FixedIncomeProtocol.ResponseIndexersT>(reader); break;
    }
    return _o;
  }
}

public struct FixedIncome : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FixedIncome GetRootAsFixedIncome(ByteBuffer _bb) { return GetRootAsFixedIncome(_bb, new FixedIncome()); }
  public static FixedIncome GetRootAsFixedIncome(ByteBuffer _bb, FixedIncome obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FixedIncome __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public double Capital { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public ulong BeginDate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public float Remuneration { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FixedIncomeProtocol.IndexerType Indexer { get { int o = __p.__offset(12); return o != 0 ? (FixedIncomeProtocol.IndexerType)__p.bb.GetSbyte(o + __p.bb_pos) : FixedIncomeProtocol.IndexerType.CDI; } }
  public FixedIncomeProtocol.TaxType TaxType { get { int o = __p.__offset(14); return o != 0 ? (FixedIncomeProtocol.TaxType)__p.bb.GetSbyte(o + __p.bb_pos) : FixedIncomeProtocol.TaxType.PRE; } }
  public FixedIncomeProtocol.FixedIncomeType FixedIncomeType { get { int o = __p.__offset(16); return o != 0 ? (FixedIncomeProtocol.FixedIncomeType)__p.bb.GetSbyte(o + __p.bb_pos) : FixedIncomeProtocol.FixedIncomeType.LC; } }
  public ulong MaturityDate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<FixedIncomeProtocol.FixedIncome> CreateFixedIncome(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      double capital = 0.0,
      ulong begin_date = 0,
      float remuneration = 0.0f,
      FixedIncomeProtocol.IndexerType indexer = FixedIncomeProtocol.IndexerType.CDI,
      FixedIncomeProtocol.TaxType tax_type = FixedIncomeProtocol.TaxType.PRE,
      FixedIncomeProtocol.FixedIncomeType fixed_income_type = FixedIncomeProtocol.FixedIncomeType.LC,
      ulong maturity_date = 0) {
    builder.StartTable(8);
    FixedIncome.AddMaturityDate(builder, maturity_date);
    FixedIncome.AddBeginDate(builder, begin_date);
    FixedIncome.AddCapital(builder, capital);
    FixedIncome.AddRemuneration(builder, remuneration);
    FixedIncome.AddName(builder, nameOffset);
    FixedIncome.AddFixedIncomeType(builder, fixed_income_type);
    FixedIncome.AddTaxType(builder, tax_type);
    FixedIncome.AddIndexer(builder, indexer);
    return FixedIncome.EndFixedIncome(builder);
  }

  public static void StartFixedIncome(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddCapital(FlatBufferBuilder builder, double capital) { builder.AddDouble(1, capital, 0.0); }
  public static void AddBeginDate(FlatBufferBuilder builder, ulong beginDate) { builder.AddUlong(2, beginDate, 0); }
  public static void AddRemuneration(FlatBufferBuilder builder, float remuneration) { builder.AddFloat(3, remuneration, 0.0f); }
  public static void AddIndexer(FlatBufferBuilder builder, FixedIncomeProtocol.IndexerType indexer) { builder.AddSbyte(4, (sbyte)indexer, 0); }
  public static void AddTaxType(FlatBufferBuilder builder, FixedIncomeProtocol.TaxType taxType) { builder.AddSbyte(5, (sbyte)taxType, 0); }
  public static void AddFixedIncomeType(FlatBufferBuilder builder, FixedIncomeProtocol.FixedIncomeType fixedIncomeType) { builder.AddSbyte(6, (sbyte)fixedIncomeType, 0); }
  public static void AddMaturityDate(FlatBufferBuilder builder, ulong maturityDate) { builder.AddUlong(7, maturityDate, 0); }
  public static Offset<FixedIncomeProtocol.FixedIncome> EndFixedIncome(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // name
    return new Offset<FixedIncomeProtocol.FixedIncome>(o);
  }
  public FixedIncomeT UnPack() {
    var _o = new FixedIncomeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FixedIncomeT _o) {
    _o.Name = this.Name;
    _o.Capital = this.Capital;
    _o.BeginDate = this.BeginDate;
    _o.Remuneration = this.Remuneration;
    _o.Indexer = this.Indexer;
    _o.TaxType = this.TaxType;
    _o.FixedIncomeType = this.FixedIncomeType;
    _o.MaturityDate = this.MaturityDate;
  }
  public static Offset<FixedIncomeProtocol.FixedIncome> Pack(FlatBufferBuilder builder, FixedIncomeT _o) {
    if (_o == null) return default(Offset<FixedIncomeProtocol.FixedIncome>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateFixedIncome(
      builder,
      _name,
      _o.Capital,
      _o.BeginDate,
      _o.Remuneration,
      _o.Indexer,
      _o.TaxType,
      _o.FixedIncomeType,
      _o.MaturityDate);
  }
};

public class FixedIncomeT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("capital")]
  public double Capital { get; set; }
  [Newtonsoft.Json.JsonProperty("begin_date")]
  public ulong BeginDate { get; set; }
  [Newtonsoft.Json.JsonProperty("remuneration")]
  public float Remuneration { get; set; }
  [Newtonsoft.Json.JsonProperty("indexer")]
  public FixedIncomeProtocol.IndexerType Indexer { get; set; }
  [Newtonsoft.Json.JsonProperty("tax_type")]
  public FixedIncomeProtocol.TaxType TaxType { get; set; }
  [Newtonsoft.Json.JsonProperty("fixed_income_type")]
  public FixedIncomeProtocol.FixedIncomeType FixedIncomeType { get; set; }
  [Newtonsoft.Json.JsonProperty("maturity_date")]
  public ulong MaturityDate { get; set; }

  public FixedIncomeT() {
    this.Name = null;
    this.Capital = 0.0;
    this.BeginDate = 0;
    this.Remuneration = 0.0f;
    this.Indexer = FixedIncomeProtocol.IndexerType.CDI;
    this.TaxType = FixedIncomeProtocol.TaxType.PRE;
    this.FixedIncomeType = FixedIncomeProtocol.FixedIncomeType.LC;
    this.MaturityDate = 0;
  }
}

public struct Indexer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Indexer GetRootAsIndexer(ByteBuffer _bb) { return GetRootAsIndexer(_bb, new Indexer()); }
  public static Indexer GetRootAsIndexer(ByteBuffer _bb, Indexer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Indexer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double CurrentValue { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public FixedIncomeProtocol.IndexerType IndexerType { get { int o = __p.__offset(6); return o != 0 ? (FixedIncomeProtocol.IndexerType)__p.bb.GetSbyte(o + __p.bb_pos) : FixedIncomeProtocol.IndexerType.CDI; } }
  public ulong UpdatedAt { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<FixedIncomeProtocol.Indexer> CreateIndexer(FlatBufferBuilder builder,
      double current_value = 0.0,
      FixedIncomeProtocol.IndexerType indexer_type = FixedIncomeProtocol.IndexerType.CDI,
      ulong updated_at = 0) {
    builder.StartTable(3);
    Indexer.AddUpdatedAt(builder, updated_at);
    Indexer.AddCurrentValue(builder, current_value);
    Indexer.AddIndexerType(builder, indexer_type);
    return Indexer.EndIndexer(builder);
  }

  public static void StartIndexer(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCurrentValue(FlatBufferBuilder builder, double currentValue) { builder.AddDouble(0, currentValue, 0.0); }
  public static void AddIndexerType(FlatBufferBuilder builder, FixedIncomeProtocol.IndexerType indexerType) { builder.AddSbyte(1, (sbyte)indexerType, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, ulong updatedAt) { builder.AddUlong(2, updatedAt, 0); }
  public static Offset<FixedIncomeProtocol.Indexer> EndIndexer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FixedIncomeProtocol.Indexer>(o);
  }
  public IndexerT UnPack() {
    var _o = new IndexerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IndexerT _o) {
    _o.CurrentValue = this.CurrentValue;
    _o.IndexerType = this.IndexerType;
    _o.UpdatedAt = this.UpdatedAt;
  }
  public static Offset<FixedIncomeProtocol.Indexer> Pack(FlatBufferBuilder builder, IndexerT _o) {
    if (_o == null) return default(Offset<FixedIncomeProtocol.Indexer>);
    return CreateIndexer(
      builder,
      _o.CurrentValue,
      _o.IndexerType,
      _o.UpdatedAt);
  }
};

public class IndexerT
{
  [Newtonsoft.Json.JsonProperty("current_value")]
  public double CurrentValue { get; set; }
  [Newtonsoft.Json.JsonProperty("indexer_type")]
  public FixedIncomeProtocol.IndexerType IndexerType { get; set; }
  [Newtonsoft.Json.JsonProperty("updated_at")]
  public ulong UpdatedAt { get; set; }

  public IndexerT() {
    this.CurrentValue = 0.0;
    this.IndexerType = FixedIncomeProtocol.IndexerType.CDI;
    this.UpdatedAt = 0;
  }
}

public struct RequestFixedIncomes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RequestFixedIncomes GetRootAsRequestFixedIncomes(ByteBuffer _bb) { return GetRootAsRequestFixedIncomes(_bb, new RequestFixedIncomes()); }
  public static RequestFixedIncomes GetRootAsRequestFixedIncomes(ByteBuffer _bb, RequestFixedIncomes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RequestFixedIncomes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartRequestFixedIncomes(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<FixedIncomeProtocol.RequestFixedIncomes> EndRequestFixedIncomes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FixedIncomeProtocol.RequestFixedIncomes>(o);
  }
  public RequestFixedIncomesT UnPack() {
    var _o = new RequestFixedIncomesT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RequestFixedIncomesT _o) {
  }
  public static Offset<FixedIncomeProtocol.RequestFixedIncomes> Pack(FlatBufferBuilder builder, RequestFixedIncomesT _o) {
    if (_o == null) return default(Offset<FixedIncomeProtocol.RequestFixedIncomes>);
    StartRequestFixedIncomes(builder);
    return EndRequestFixedIncomes(builder);
  }
};

public class RequestFixedIncomesT
{

  public RequestFixedIncomesT() {
  }
}

public struct RequestIndexers : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RequestIndexers GetRootAsRequestIndexers(ByteBuffer _bb) { return GetRootAsRequestIndexers(_bb, new RequestIndexers()); }
  public static RequestIndexers GetRootAsRequestIndexers(ByteBuffer _bb, RequestIndexers obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RequestIndexers __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartRequestIndexers(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<FixedIncomeProtocol.RequestIndexers> EndRequestIndexers(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FixedIncomeProtocol.RequestIndexers>(o);
  }
  public RequestIndexersT UnPack() {
    var _o = new RequestIndexersT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RequestIndexersT _o) {
  }
  public static Offset<FixedIncomeProtocol.RequestIndexers> Pack(FlatBufferBuilder builder, RequestIndexersT _o) {
    if (_o == null) return default(Offset<FixedIncomeProtocol.RequestIndexers>);
    StartRequestIndexers(builder);
    return EndRequestIndexers(builder);
  }
};

public class RequestIndexersT
{

  public RequestIndexersT() {
  }
}

public struct ResponseFixedIncomes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ResponseFixedIncomes GetRootAsResponseFixedIncomes(ByteBuffer _bb) { return GetRootAsResponseFixedIncomes(_bb, new ResponseFixedIncomes()); }
  public static ResponseFixedIncomes GetRootAsResponseFixedIncomes(ByteBuffer _bb, ResponseFixedIncomes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResponseFixedIncomes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FixedIncomeProtocol.FixedIncome? Itens(int j) { int o = __p.__offset(4); return o != 0 ? (FixedIncomeProtocol.FixedIncome?)(new FixedIncomeProtocol.FixedIncome()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItensLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FixedIncomeProtocol.ResponseFixedIncomes> CreateResponseFixedIncomes(FlatBufferBuilder builder,
      VectorOffset itensOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ResponseFixedIncomes.AddItens(builder, itensOffset);
    return ResponseFixedIncomes.EndResponseFixedIncomes(builder);
  }

  public static void StartResponseFixedIncomes(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddItens(FlatBufferBuilder builder, VectorOffset itensOffset) { builder.AddOffset(0, itensOffset.Value, 0); }
  public static VectorOffset CreateItensVector(FlatBufferBuilder builder, Offset<FixedIncomeProtocol.FixedIncome>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItensVectorBlock(FlatBufferBuilder builder, Offset<FixedIncomeProtocol.FixedIncome>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItensVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FixedIncomeProtocol.ResponseFixedIncomes> EndResponseFixedIncomes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FixedIncomeProtocol.ResponseFixedIncomes>(o);
  }
  public ResponseFixedIncomesT UnPack() {
    var _o = new ResponseFixedIncomesT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ResponseFixedIncomesT _o) {
    _o.Itens = new List<FixedIncomeProtocol.FixedIncomeT>();
    for (var _j = 0; _j < this.ItensLength; ++_j) {_o.Itens.Add(this.Itens(_j).HasValue ? this.Itens(_j).Value.UnPack() : null);}
  }
  public static Offset<FixedIncomeProtocol.ResponseFixedIncomes> Pack(FlatBufferBuilder builder, ResponseFixedIncomesT _o) {
    if (_o == null) return default(Offset<FixedIncomeProtocol.ResponseFixedIncomes>);
    var _itens = default(VectorOffset);
    if (_o.Itens != null) {
      var __itens = new Offset<FixedIncomeProtocol.FixedIncome>[_o.Itens.Count];
      for (var _j = 0; _j < __itens.Length; ++_j) { __itens[_j] = FixedIncomeProtocol.FixedIncome.Pack(builder, _o.Itens[_j]); }
      _itens = CreateItensVector(builder, __itens);
    }
    return CreateResponseFixedIncomes(
      builder,
      _itens);
  }
};

public class ResponseFixedIncomesT
{
  [Newtonsoft.Json.JsonProperty("itens")]
  public List<FixedIncomeProtocol.FixedIncomeT> Itens { get; set; }

  public ResponseFixedIncomesT() {
    this.Itens = null;
  }
}

public struct ResponseIndexers : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ResponseIndexers GetRootAsResponseIndexers(ByteBuffer _bb) { return GetRootAsResponseIndexers(_bb, new ResponseIndexers()); }
  public static ResponseIndexers GetRootAsResponseIndexers(ByteBuffer _bb, ResponseIndexers obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResponseIndexers __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FixedIncomeProtocol.Indexer? Itens(int j) { int o = __p.__offset(4); return o != 0 ? (FixedIncomeProtocol.Indexer?)(new FixedIncomeProtocol.Indexer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItensLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FixedIncomeProtocol.ResponseIndexers> CreateResponseIndexers(FlatBufferBuilder builder,
      VectorOffset itensOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ResponseIndexers.AddItens(builder, itensOffset);
    return ResponseIndexers.EndResponseIndexers(builder);
  }

  public static void StartResponseIndexers(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddItens(FlatBufferBuilder builder, VectorOffset itensOffset) { builder.AddOffset(0, itensOffset.Value, 0); }
  public static VectorOffset CreateItensVector(FlatBufferBuilder builder, Offset<FixedIncomeProtocol.Indexer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItensVectorBlock(FlatBufferBuilder builder, Offset<FixedIncomeProtocol.Indexer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItensVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FixedIncomeProtocol.ResponseIndexers> EndResponseIndexers(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FixedIncomeProtocol.ResponseIndexers>(o);
  }
  public ResponseIndexersT UnPack() {
    var _o = new ResponseIndexersT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ResponseIndexersT _o) {
    _o.Itens = new List<FixedIncomeProtocol.IndexerT>();
    for (var _j = 0; _j < this.ItensLength; ++_j) {_o.Itens.Add(this.Itens(_j).HasValue ? this.Itens(_j).Value.UnPack() : null);}
  }
  public static Offset<FixedIncomeProtocol.ResponseIndexers> Pack(FlatBufferBuilder builder, ResponseIndexersT _o) {
    if (_o == null) return default(Offset<FixedIncomeProtocol.ResponseIndexers>);
    var _itens = default(VectorOffset);
    if (_o.Itens != null) {
      var __itens = new Offset<FixedIncomeProtocol.Indexer>[_o.Itens.Count];
      for (var _j = 0; _j < __itens.Length; ++_j) { __itens[_j] = FixedIncomeProtocol.Indexer.Pack(builder, _o.Itens[_j]); }
      _itens = CreateItensVector(builder, __itens);
    }
    return CreateResponseIndexers(
      builder,
      _itens);
  }
};

public class ResponseIndexersT
{
  [Newtonsoft.Json.JsonProperty("itens")]
  public List<FixedIncomeProtocol.IndexerT> Itens { get; set; }

  public ResponseIndexersT() {
    this.Itens = null;
  }
}

public struct FixedIncomeMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FixedIncomeMessage GetRootAsFixedIncomeMessage(ByteBuffer _bb) { return GetRootAsFixedIncomeMessage(_bb, new FixedIncomeMessage()); }
  public static FixedIncomeMessage GetRootAsFixedIncomeMessage(ByteBuffer _bb, FixedIncomeMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FixedIncomeMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FixedIncomeProtocol.FixedIncomeMessageType MessageType { get { int o = __p.__offset(4); return o != 0 ? (FixedIncomeProtocol.FixedIncomeMessageType)__p.bb.Get(o + __p.bb_pos) : FixedIncomeProtocol.FixedIncomeMessageType.NONE; } }
  public TTable? Message<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public FixedIncomeProtocol.FixedIncome MessageAsFixedIncome() { return Message<FixedIncomeProtocol.FixedIncome>().Value; }
  public FixedIncomeProtocol.Indexer MessageAsIndexer() { return Message<FixedIncomeProtocol.Indexer>().Value; }
  public FixedIncomeProtocol.RequestFixedIncomes MessageAsRequestFixedIncomes() { return Message<FixedIncomeProtocol.RequestFixedIncomes>().Value; }
  public FixedIncomeProtocol.RequestIndexers MessageAsRequestIndexers() { return Message<FixedIncomeProtocol.RequestIndexers>().Value; }
  public FixedIncomeProtocol.ResponseFixedIncomes MessageAsResponseFixedIncomes() { return Message<FixedIncomeProtocol.ResponseFixedIncomes>().Value; }
  public FixedIncomeProtocol.ResponseIndexers MessageAsResponseIndexers() { return Message<FixedIncomeProtocol.ResponseIndexers>().Value; }

  public static Offset<FixedIncomeProtocol.FixedIncomeMessage> CreateFixedIncomeMessage(FlatBufferBuilder builder,
      FixedIncomeProtocol.FixedIncomeMessageType message_type = FixedIncomeProtocol.FixedIncomeMessageType.NONE,
      int messageOffset = 0) {
    builder.StartTable(2);
    FixedIncomeMessage.AddMessage(builder, messageOffset);
    FixedIncomeMessage.AddMessageType(builder, message_type);
    return FixedIncomeMessage.EndFixedIncomeMessage(builder);
  }

  public static void StartFixedIncomeMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMessageType(FlatBufferBuilder builder, FixedIncomeProtocol.FixedIncomeMessageType messageType) { builder.AddByte(0, (byte)messageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int messageOffset) { builder.AddOffset(1, messageOffset, 0); }
  public static Offset<FixedIncomeProtocol.FixedIncomeMessage> EndFixedIncomeMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // message
    return new Offset<FixedIncomeProtocol.FixedIncomeMessage>(o);
  }
  public static void FinishFixedIncomeMessageBuffer(FlatBufferBuilder builder, Offset<FixedIncomeProtocol.FixedIncomeMessage> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFixedIncomeMessageBuffer(FlatBufferBuilder builder, Offset<FixedIncomeProtocol.FixedIncomeMessage> offset) { builder.FinishSizePrefixed(offset.Value); }
  public FixedIncomeMessageT UnPack() {
    var _o = new FixedIncomeMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FixedIncomeMessageT _o) {
    _o.Message = new FixedIncomeProtocol.FixedIncomeMessageTypeUnion();
    _o.Message.Type = this.MessageType;
    switch (this.MessageType) {
      default: break;
      case FixedIncomeProtocol.FixedIncomeMessageType.FixedIncome:
        _o.Message.Value = this.Message<FixedIncomeProtocol.FixedIncome>().HasValue ? this.Message<FixedIncomeProtocol.FixedIncome>().Value.UnPack() : null;
        break;
      case FixedIncomeProtocol.FixedIncomeMessageType.Indexer:
        _o.Message.Value = this.Message<FixedIncomeProtocol.Indexer>().HasValue ? this.Message<FixedIncomeProtocol.Indexer>().Value.UnPack() : null;
        break;
      case FixedIncomeProtocol.FixedIncomeMessageType.RequestFixedIncomes:
        _o.Message.Value = this.Message<FixedIncomeProtocol.RequestFixedIncomes>().HasValue ? this.Message<FixedIncomeProtocol.RequestFixedIncomes>().Value.UnPack() : null;
        break;
      case FixedIncomeProtocol.FixedIncomeMessageType.RequestIndexers:
        _o.Message.Value = this.Message<FixedIncomeProtocol.RequestIndexers>().HasValue ? this.Message<FixedIncomeProtocol.RequestIndexers>().Value.UnPack() : null;
        break;
      case FixedIncomeProtocol.FixedIncomeMessageType.ResponseFixedIncomes:
        _o.Message.Value = this.Message<FixedIncomeProtocol.ResponseFixedIncomes>().HasValue ? this.Message<FixedIncomeProtocol.ResponseFixedIncomes>().Value.UnPack() : null;
        break;
      case FixedIncomeProtocol.FixedIncomeMessageType.ResponseIndexers:
        _o.Message.Value = this.Message<FixedIncomeProtocol.ResponseIndexers>().HasValue ? this.Message<FixedIncomeProtocol.ResponseIndexers>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<FixedIncomeProtocol.FixedIncomeMessage> Pack(FlatBufferBuilder builder, FixedIncomeMessageT _o) {
    if (_o == null) return default(Offset<FixedIncomeProtocol.FixedIncomeMessage>);
    var _message_type = _o.Message == null ? FixedIncomeProtocol.FixedIncomeMessageType.NONE : _o.Message.Type;
    var _message = _o.Message == null ? 0 : FixedIncomeProtocol.FixedIncomeMessageTypeUnion.Pack(builder, _o.Message);
    return CreateFixedIncomeMessage(
      builder,
      _message_type,
      _message);
  }
};

public class FixedIncomeMessageT
{
  [Newtonsoft.Json.JsonProperty("message_type")]
  private FixedIncomeProtocol.FixedIncomeMessageType MessageType {
    get {
      return this.Message != null ? this.Message.Type : FixedIncomeProtocol.FixedIncomeMessageType.NONE;
    }
    set {
      this.Message = new FixedIncomeProtocol.FixedIncomeMessageTypeUnion();
      this.Message.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("message")]
  [Newtonsoft.Json.JsonConverter(typeof(FixedIncomeProtocol.FixedIncomeMessageTypeUnion_JsonConverter))]
  public FixedIncomeProtocol.FixedIncomeMessageTypeUnion Message { get; set; }

  public FixedIncomeMessageT() {
    this.Message = null;
  }

  public static FixedIncomeMessageT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<FixedIncomeMessageT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static FixedIncomeMessageT DeserializeFromBinary(byte[] fbBuffer) {
    return FixedIncomeMessage.GetRootAsFixedIncomeMessage(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    FixedIncomeMessage.FinishFixedIncomeMessageBuffer(fbb, FixedIncomeMessage.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
